# ADOBE CONFIDENTIAL
# Copyright 2024 Adobe All Rights Reserved.
# NOTICE:  All information contained herein is, and remains the property of Adobe and its suppliers, if any.
# The intellectual and technical concepts contained herein are proprietary to Adobe and its suppliers and are protected by all applicable intellectual property laws, including trade secret and copyright laws.
# Dissemination of this information or reproduction of this material is strictly forbidden unless prior written permission is obtained from Adobe.

# frozen_string_literal: true

require 'yaml'
require 'colorator'

desc 'Optimize images in modified uncommitted files. For other images, use "path" such as "rake image_optim path=../path/to/dir/or/file".'
task :image_optim do
  puts
  puts 'Checking images ...'.magenta
  path = ENV['path']

  unless path
    puts 'Looking in uncommitted files ...'.blue
    modified_files = `git ls-files --modified --others --exclude-standard -- ..`.split("\n")
    deleted_files = `git ls-files --deleted -- ..`.split("\n")
    image_files_to_check = (modified_files - deleted_files).select do |file|
      File.extname(file) =~ /\.(png|jpg|jpeg|gif)/i
    end

    next puts 'No images to check.'.magenta if image_files_to_check.empty?

    path = image_files_to_check.join(' ')
  end

  system "bundle exec image_optim --no-svgo --recursive #{path}"
end

desc 'Render the templated files'
task :render do
  sh '_scripts/render'
end

desc 'Find unused images.'
task :unused_images do
  puts 'Running a task for finding unused images (png,svg,jpeg,jpg,ico)'.magenta
  images = FileList['../help/**/*.{png,svg,jpeg,jpg,ico}']

  puts "The project contains a total of #{images.size} images."

  puts 'Checking for unlinked images...'
  Dir['../help/**/*.{md}'].each do |file|
    # Exclude symmlinks
    next if File.symlink? file

    images.delete_if { |image| File.read(file).include?(File.basename(image)) }
  end

  if images.empty?
    puts 'No unlinked images'.green
  else
    images.each do |image|
      puts "No links for #{image}".yellow
    end
    puts "Found #{images.size} dangling images".red
  end
end

desc 'Find unused includes.'
task :unused_includes do
  puts 'Running a task to find unused _includes'.magenta
  includes = FileList['../help/_includes/**/*']

  puts "The project contains a total of #{includes.size} includes"

  # snippets.md is expected and should not be removed based on the way the snippets functionality was designed for ExL.
  # See https://experienceleague.corp.adobe.com/docs/authoring-guide-exl/using/authoring/includes-snippets.html?lang=en#creating-snippets.
  exclude = '../help/_includes/snippets.md'
  includes.exclude(exclude) if exclude

  Dir['../help/**/*.{md}'].each do |file|
    next if File.symlink? file

    includes.delete_if { |include| File.read(file).include?(File.basename(include)) }
  end

  if includes.empty?
    puts 'No unlinked includes'.green
  else
    puts 'The following includes are not linked:'
    includes.each do |include|
      puts "No links for #{include}".yellow
    end
    puts "Found #{includes.size} unlinked includes".red
  end
end
